buildscript {
  repositories {
    google()
    mavenCentral()
  }
  dependencies {
  }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'dagger.hilt.android.plugin'

def makeVersion = { String endSuffix ->
  def suffix = ''

  if (endSuffix != null) {
    suffix += "-$endSuffix"
  }
  def builtVersionName = "2.0.0"
  def useAutoGenerated = true

  if (useAutoGenerated) {
    builtVersionName += suffix
  }

  builtVersionName
}

android {
  compileSdkVersion project.compileSdkVersion
  buildToolsVersion project.buildToolsVersion

  namespace 'com.test.project'

  defaultConfig {
    applicationId 'com.test.project'
    minSdkVersion project.minSdkVersion
    targetSdkVersion project.targetSdkVersion

    buildFeatures {
      vectorDrawables.useSupportLibrary = true
      multiDexEnabled true
    }

    testInstrumentationRunnerArguments clearPackageData: 'true'
    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
  }

  flavorDimensions "default"

  productFlavors {
    qa {
      dimension "default"
      minSdkVersion project.minSdkVersion

      versionCode 1264 + gitVersioner.versionCode
      versionName makeVersion('qa')
    }

    v23 {
      dimension "default"
      minSdkVersion project.minSdkVersion

      versionCode 1264 + gitVersioner.versionCode
      versionName makeVersion()
    }
  }

  bundle {
    density {
      // Different APKs are generated for devices with different screen densities; true by default.
      enableSplit true
    }
    abi {
      // Different APKs are generated for devices with different CPU architectures; true by default.
      enableSplit true
    }
    language {
      // This is disabled so that the App Bundle does NOT split the APK for each language.
      // We're gonna use the same APK for all languages.
      enableSplit false
    }
  }

  buildTypes {
    debug {
      zipAlignEnabled true
      aaptOptions.cruncherEnabled = false
      ext.alwaysUpdateBuildId = false

      // due to https://www.techyourchance.com/disable-firebase-crashlytics-in-android-debug-builds/
      manifestPlaceholders = [crashlyticsCollectionEnabled: 'true']
      ext.enableCrashlytics = true
    }

    release {
      minifyEnabled true
      shrinkResources true
      proguardFile getDefaultProguardFile('proguard-android.txt')
      proguardFiles fileTree(dir: '../tools/proguard/release', include: ['*.pro']).
              asList().
              toArray()

      // due to https://www.techyourchance.com/disable-firebase-crashlytics-in-android-debug-builds/
      manifestPlaceholders = [crashlyticsCollectionEnabled: 'true']
      ext.enableCrashlytics = true
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_11
    targetCompatibility JavaVersion.VERSION_11
  }

  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_11
    useIR = true
  }

  buildFeatures {
    viewBinding true
    compose true
  }

  composeOptions {
    kotlinCompilerExtensionVersion rootProject.ext.composeVersion
    // Remove kotlinCompilerVersion from here
  }

  hilt {
    enableAggregatingTask = true
  }

  kapt {
    correctErrorTypes = true
    useBuildCache = true

    arguments {
      arg("dagger.formatGeneratedSource", "disabled")
    }
  }

  lint {
    abortOnError true
    checkDependencies true
    warningsAsErrors false

    setLintConfig(file("../tools/lint-rules.xml"))
    baseline file("lint-baseline.xml")
  }

  testOptions {
    unitTests.returnDefaultValues = true
    execution 'ANDROIDX_TEST_ORCHESTRATOR'
  }

  android.variantFilter { variant ->
    // Loop flavors
    variant.getFlavors().each { flavor ->
      if (variant.buildType.name == 'debug' && flavor.name == 'v23') {
        variant.setIgnore(true)
      }
      if (variant.buildType.name == 'release' && flavor.name == 'qa') {
        variant.setIgnore(true)
      }
    }
  }

  applicationVariants.all { variant ->
    variant.outputs.all { output ->
      if (outputFileName.endsWith('.apk')) {
        def apkName = "Test-Project"
        if (variant.buildType.name == 'release') {
          apkName += '-v' + variant.versionName + '-release.apk'
        } else {
          apkName += "-${variant.versionName}-(${variant.versionCode}).apk"
        }
        outputFileName = apkName
      }
    }
  }
}

dependencies {
  implementation 'androidx.activity:activity-compose:1.4.0'

  // Compose
  implementation "androidx.compose.ui:ui:$composeVersion"
  implementation "androidx.compose.ui:ui-tooling:$composeVersion"
  implementation "androidx.compose.material:material:$composeVersion"
  implementation "androidx.compose.animation:animation:$composeVersion"
  implementation "androidx.compose.material:material:$composeVersion"
  implementation "androidx.compose.compiler:compiler:$composeVersion"
  implementation "androidx.compose.foundation:foundation:$composeVersion"
  implementation "androidx.compose.runtime:runtime:$composeVersion"
  implementation "androidx.compose.material3:material3-window-size-class:1.0.0-alpha13"

  implementation "com.google.accompanist:accompanist-insets:$accompanistVersion"
  implementation "com.google.accompanist:accompanist-systemuicontroller:$accompanistVersion"
  implementation "com.google.accompanist:accompanist-swiperefresh:$accompanistVersion"
  implementation "com.google.accompanist:accompanist-placeholder-material:$accompanistVersion"
  implementation "com.google.accompanist:accompanist-drawablepainter:$accompanistVersion"

  // Landscapist for Glide
  implementation 'com.github.skydoves:landscapist-glide:1.5.2'

  implementation "com.google.dagger:dagger:$daggerVersion"
  kapt "com.google.dagger:dagger-compiler:$daggerVersion"
  kaptTest "com.google.dagger:dagger-compiler:$daggerVersion"

  implementation "com.google.dagger:hilt-android:$daggerVersion"
  kapt "com.google.dagger:hilt-compiler:$daggerVersion"

  // For local unit tests
  testImplementation "com.google.dagger:hilt-android:$daggerVersion"
  kaptTest "com.google.dagger:hilt-compiler:$daggerVersion"

  implementation "com.squareup.moshi:moshi:$moshiVersion"
  implementation "com.squareup.moshi:moshi-kotlin:$moshiVersion"
  implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"
  kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshiVersion"

  implementation 'androidx.datastore:datastore-preferences:1.0.0'

  // Glide should generate code before everyone else
  implementation "com.github.bumptech.glide:glide:$glideVersion"
  kapt "com.github.bumptech.glide:compiler:$glideVersion"
  implementation("com.github.bumptech.glide:okhttp3-integration:$glideVersion") {
    transitive = false
  }

  // Retrofit
  implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"

  // OkHttp
  implementation "com.squareup.okhttp3:okhttp:$okHttpVersion"
  implementation "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"

  // Coroutines
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.2'

  // ViewModel and LiveData
  implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"
  implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"

  // Paging
  implementation 'androidx.paging:paging-runtime-ktx:3.1.1'
  implementation 'androidx.paging:paging-compose:1.0.0-alpha15'

  // Work manager
  implementation 'androidx.work:work-runtime-ktx:2.7.1'

  // ThreeTen Android Backport
  implementation 'com.jakewharton.threetenabp:threetenabp:1.4.0'

  // Timber
  implementation 'com.jakewharton.timber:timber:5.0.1'

  // Kotlin
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

  // Kotlin extensions
  implementation "androidx.core:core-ktx:1.8.0"
  implementation "androidx.navigation:navigation-fragment-ktx:$navVersion"
  implementation "androidx.navigation:navigation-ui-ktx:$navVersion"
  implementation "androidx.navigation:navigation-compose:$navVersion"
  implementation 'androidx.fragment:fragment-ktx:1.4.1'
  implementation "androidx.window:window:1.0.0"

  // Material components
  implementation 'com.google.android.material:material:1.6.1'

  // MultiDex
  implementation 'androidx.multidex:multidex:2.0.1'

  // Flipper
  debugImplementation 'com.facebook.flipper:flipper:0.149.0'
  debugImplementation 'com.facebook.soloader:soloader:0.10.3'
  debugImplementation 'com.facebook.flipper:flipper-network-plugin:0.149.0'
  releaseImplementation 'com.facebook.flipper:flipper-noop:0.149.0'

  // testing
  testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.2"
  testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
  testImplementation 'junit:junit:4.13.2'
  testImplementation "org.mockito.kotlin:mockito-kotlin:4.0.0"
  testImplementation 'org.robolectric:robolectric:4.8.1'
  testImplementation 'androidx.test.ext:junit:1.1.3'
  // use normal backport for tests [https://stackoverflow.com/a/53085180/2674530]
  testImplementation('org.threeten:threetenbp:1.6.0') {
    exclude group: 'com.jakewharton.threetenabp', module: 'threetenabp'
  }
}
